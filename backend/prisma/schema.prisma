// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                    String    @id @default(uuid())
  email                 String    @unique
  apiKey                String    @unique @map("api_key")
  password              String    @default("") // Required with default for existing records
  name                  String?   @map("full_name")
  company               String?
  phone                 String?
  website               String?
  bio                   String?
  avatar                String?
  emailPreferences      String?   @map("email_preferences") // JSON stored as string
  stripeCustomerId      String?   @map("stripe_customer_id")
  resetPasswordToken    String?   @unique @map("reset_password_token")
  resetPasswordExpires  DateTime? @map("reset_password_expires")
  emailVerified         Boolean   @default(false) @map("email_verified")
  emailVerificationToken String?  @unique @map("email_verification_token")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")

  jobs      Job[]

  @@map("postjob_users")
}

model JobBoard {
  id        String   @id @default(uuid())
  name      String
  baseUrl   String   @map("base_url")
  postUrl   String   @map("post_url")
  selectors String   @default("{}") // JSON stored as string for SQLite
  enabled   Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  postings  JobPosting[]

  @@map("job_boards")
}

model Job {
  id              String   @id @default(uuid())
  userId          String   @map("user_id")
  title           String
  description     String
  location        String
  salaryMin       Int?     @map("salary_min")
  salaryMax       Int?     @map("salary_max")
  company         String
  contactEmail    String   @map("contact_email")
  employmentType  String?  @map("employment_type")
  department      String?
  status          String   @default("draft") // draft, pending, posting, completed, failed, payment_pending
  paymentIntentId String?  @map("payment_intent_id")
  paymentStatus   String   @default("pending") @map("payment_status") // pending, processing, succeeded, failed
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  postings     JobPosting[]
  applications Application[]

  @@index([userId])
  @@index([status])
  @@map("postjob_jobs")
}

model JobPosting {
  id           String    @id @default(uuid())
  jobId        String    @map("job_id")
  boardId      String    @map("board_id")
  status       String    @default("pending") // pending, posting, success, failed
  externalUrl  String?   @map("external_url")
  errorMessage String?   @map("error_message")
  postedAt     DateTime? @map("posted_at")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  job          Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  board        JobBoard  @relation(fields: [boardId], references: [id])

  @@index([jobId])
  @@index([boardId])
  @@index([status])
  @@map("job_postings")
}

model Application {
  id              String   @id @default(uuid())
  jobId           String   @map("job_id")
  candidateName   String   @map("candidate_name")
  candidateEmail  String   @map("candidate_email")
  candidatePhone  String?  @map("candidate_phone")
  resumeUrl       String?  @map("resume_url")
  coverLetter     String?  @map("cover_letter")
  portfolio       String?
  linkedIn        String?  @map("linkedin_url")
  status          String   @default("new") // new, screening, interview, rejected, hired
  score           Int?     // 0-100 application score
  notes           String?  // Internal notes about the applicant
  appliedAt       DateTime @default(now()) @map("applied_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  job             Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  communications  ApplicationCommunication[]

  @@index([jobId])
  @@index([status])
  @@index([candidateEmail])
  @@map("applications")
}

model ApplicationCommunication {
  id            String   @id @default(uuid())
  applicationId String   @map("application_id")
  subject       String
  message       String
  direction     String   // inbound, outbound
  sentAt        DateTime @default(now()) @map("sent_at")

  application   Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@index([applicationId])
  @@map("application_communications")
}